[{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/Component.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/api/eventApi.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/api/modelApi.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/api/shipmentApi.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/constant/CustomField.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/constant/Event.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/constant/ExecutionStatus.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/constant/ProcessStatus.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/constant/TransportationMode.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/controller/BaseController.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/controller/BaseDetailController.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/controller/ErrorHandler.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/controller/FreightUnit.controller.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/controller/MapHelper.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/controller/NotFound.controller.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/controller/ReportEventsDialog.js","messages":[{"ruleId":"valid-jsdoc","severity":1,"message":"JSDoc syntax error.","line":82,"column":7,"nodeType":"Block","messageId":"syntaxError","endLine":96,"endColumn":10},{"ruleId":"indent","severity":1,"message":"Expected indentation of 12 spaces but found 10.","line":251,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":251,"endColumn":11,"fix":{"range":[7350,7360],"text":"            "}},{"ruleId":"indent","severity":1,"message":"Expected indentation of 10 spaces but found 8.","line":252,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":252,"endColumn":9,"fix":{"range":[7398,7406],"text":"          "}},{"ruleId":"no-unused-vars","severity":1,"message":"'shouldRenderCompositionTable' is assigned a value but never used.","line":399,"column":13,"nodeType":"Identifier","endLine":399,"endColumn":41},{"ruleId":"no-extra-bind","severity":1,"message":"The function binding is unnecessary.","line":441,"column":15,"nodeType":"CallExpression","messageId":"unexpected","fix":{"range":[13757,13768],"text":""}}],"errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":3,"source":"sap.ui.define(\n  [\n    \"sap/ui/base/ManagedObject\",\n    \"sap/ui/core/Fragment\",\n    \"sap/ui/layout/form/FormElement\",\n    \"sap/m/Input\",\n    \"sap/m/Select\",\n    \"sap/ui/core/Item\",\n    \"sap/m/DatePicker\",\n    \"sap/m/DateTimePicker\",\n    \"sap/m/MessageBox\",\n    \"sap/ui/core/ValueState\",\n    \"sap/ui/model/json/JSONModel\",\n    \"sap/ui/model/BindingMode\",\n    \"sap/base/util/deepClone\",\n    \"sap/base/util/isEmptyObject\",\n    \"../model/formatter\",\n    \"../util/registerState\",\n    \"../util/i18n\",\n    \"../api/modelApi\",\n    \"../api/eventApi\",\n    \"../constant/CustomField\",\n  ],\n  function (\n    ManagedObject,\n    Fragment,\n    FormElement,\n    Input,\n    Select,\n    Item,\n    DatePicker,\n    DateTimePicker,\n    MessageBox,\n    ValueState,\n    JSONModel,\n    BindingMode,\n    deepClone,\n    isEmptyObject,\n    formatter,\n    registerState,\n    i18n,\n    modelApi,\n    eventApi,\n    CustomField\n  ) {\n    \"use strict\";\n\n    var FORM_MODEL_NAME = \"eventDetail\";\n    var DATE_PATTERN = \"yyyy-MM-dd\";\n    var DATE_TIME_PATTERN = \"yyyy-MM-dd'T'HH:mm:ss.SSSX\";\n    var LOCAL_TIMEZONE = Intl.DateTimeFormat().resolvedOptions().timeZone || \"UTC\";\n    var CODE_LIST_FIELD_SUFFIX = \"_code\";\n\n    return ManagedObject.extend(\"com.sap.gtt.app.sample.sst.controller.ReportEventsDialog\", {\n\n      state: {\n        eventType: \"\",\n        hasRefFields: false,\n        isUserDefinedFieldsLoading: true,\n        isEventReporting: false,\n        userDefinedFieldBindingPaths: [],\n        timeZoneOffsetMap: {},\n        deliveryItems: [],\n\n        isPlannedEventValid: true,\n        isUnplannedEventValid: true,\n        isActualBusinessTimeValid: true,\n        isActualBusinessTimeZoneValid: true,\n        isReportedByValid: true,\n      },\n\n      /**\n       * Create a new dialog instance\n       *\n       * @param {sap.ui.core.mvc.View} view Dependent view\n       */\n      constructor: function (view) {\n        this._id = view.createId(\"reportEventsDialog\");\n        this._view = view;\n      },\n\n      /**\n       * Init & Open this dialog\n       *\n       * @param {{\n       *   eventStatue: \"Planned\"|\"Unplanned\",\n       *   altKey: string,\n       *   plannedEvents: object[],\n       *   unplannedEvents?: object[],\n       *   refPlannedEvents?: object[],\n       *   timeZones?: object[],\n       *   onReportSuccess?: () => void,\n       *   onReportFailed?: () => void,\n       *   onClose?: () => void,\n       * }} props Props\n       */\n      open: function (props) {\n        this.props = props;\n\n        if (!this._dialog) {\n          Fragment.load({\n            id: this._id,\n            name: \"com.sap.gtt.app.sample.sst.view.fragments.ReportEventsDialog\",\n            controller: this,\n          }).then(function (dialog) {\n            this._dialog = dialog;\n            this._view.addDependent(this._dialog);\n            this._dialog.setModel(new JSONModel(props).setDefaultBindingMode(BindingMode.OneWay), \"props\");\n\n            registerState(this.state, this);\n            this._dialog.setModel(new JSONModel(this.state, true), \"state\");\n\n            // Additional models\n            this._dialog.setModel(new JSONModel(), FORM_MODEL_NAME);\n            this._formModel = this._dialog.getModel(FORM_MODEL_NAME);\n\n            this._dialog.open();\n          }.bind(this));\n        } else {\n          this._dialog.getModel(\"props\").setData(props);\n          this._dialog.open();\n        }\n      },\n\n      onAfterOpen: function () {\n        // Setup timezone offset map (timeZoneCode -> offset)\n        if (this.props.timeZones) {\n          this.props.timeZones.forEach(function (timeZone) {\n            this.state.timeZoneOffsetMap[timeZone.timeZoneCode] = timeZone.offset;\n          }.bind(this));\n        }\n\n        // Format the current date as an ISO string with local time zone offset\n        var date = new Date();\n        /**\n         * @example \"2020-12-02T08:00:00.000+08:00\"\n         */\n        var currentTimestamp = new Date(date.getTime() - (date.getTimezoneOffset() * 60000)).toISOString()\n          .replace(\"Z\", this.state.timeZoneOffsetMap[LOCAL_TIMEZONE] || \"Z\");\n\n        // Set default values\n        this.setFieldsValue({\n          actualBusinessTimestamp: currentTimestamp,\n          actualBusinessTimeZone: LOCAL_TIMEZONE,\n        });\n\n        // Enhance time zone filter function\n        this.byId(\"actualBusinessTimeZone\").setFilterFunction(function (term, item) {\n          // A case-insensitive 'string contains' filter\n          var re = new RegExp(term.replace(/\\+/, \"\\\\+\"), \"i\");\n          return re.test(item.getText()) || re.test(item.getAdditionalText());\n        });\n\n        // Reported by logon user by default\n        if (sap.ushell && sap.ushell.Container) {\n          sap.ushell.Container.getServiceAsync(\"UserInfo\").then(function (userInfo) {\n            this.setFieldValue(\"reportedBy\", userInfo.getUser().getEmail());\n          }.bind(this));\n        }\n      },\n\n      onAfterClose: function () {\n        this.reset();\n        if (this.props.onClose) {\n          this.props.onClose();\n        }\n      },\n\n      reset: function () {\n        // Clear form data\n        this._formModel.setData({});\n        this.byId(\"plannedEvent\").setSelectedKey();\n        this.byId(\"unplannedEvent\").setSelectedKey();\n        this.byId(\"refPlannedEvent\").setSelectedKey();\n\n        this.resetState();\n\n        this.removeAllUserDefinedFields();\n      },\n\n      close: function () {\n        this._dialog.close();\n      },\n\n      destory: function () {\n        this._dialog.destroy();\n      },\n\n      exit: function () {\n        delete this._view;\n      },\n\n      /**\n       * Get inner element of this dialog by its ID\n       *\n       * @param {string} id ID\n       * @return {sap.ui.core.Element} Element by its ID or undefined\n       */\n      byId: function (id) {\n        var element = Fragment.byId(this._id, id);\n\n        if (!element) {\n          throw new Error(\n            \"Element with ID '\" + id + \"' does not exist in the '\" + this._id + \"' Fragment.\"\n          );\n        }\n\n        return element;\n      },\n\n      /**\n       * Create an ID based on this fragment\n       *\n       * @param {string} id ID\n       * @return {string} New ID based on this fragment\n       */\n      createId: function (id) {\n        return Fragment.createId(this._id, id);\n      },\n\n      /**\n       * Update user defined fields when `eventType` changes\n       *\n       * @param {object} changes Value changes of `eventType`\n       */\n      onEventTypeChange: function (changes) {\n        this.updateUserDefinedFields(changes.current);\n      },\n\n      /**\n       * Handle planned event select\n       *\n       * @param {sap.ui.core.Item} selectedItem Selected planned event item\n       */\n      handlePlannedEventSelect: function (selectedItem) {\n        var selectedEvent = selectedItem.getBindingContext(\"props\").getObject();\n\n        // Bind selected planned event's info to form model\n        this.setFieldsValue({\n          locationAltKey: selectedEvent.locationAltKey,\n          eventMatchKey: selectedEvent.eventMatchKey,\n        });\n\n        this.setEventType(selectedEvent.eventType);\n        this.setIsPlannedEventValid(true);\n\n        this.updateDeliveryItemsTable((\n          selectedEvent.eventType === \"POD\" &&\n          Array.isArray(selectedEvent.deliveryItems)\n        ) ? selectedEvent.deliveryItems.filter(function (deliveryItem) {\n          return !deliveryItem.isInFreightUnit;\n        }) : []);\n      },\n\n      /**\n       * Handle unplanned event select\n       *\n       * @param {sap.ui.core.Item} selectedItem Selected unplanned event item with eventType key\n       */\n      handleUnplannedEventSelect: function (selectedItem) {\n        var selectedEvent = selectedItem.getBindingContext(\"props\").getObject();\n        var eventType = selectedEvent.eventType.target.split(\".\").pop();\n\n        this.setEventType(eventType);\n        this.setIsUnplannedEventValid(true);\n      },\n\n      /**\n       * Handle reference planned event select\n       *\n       * @param {sap.ui.core.Item} selectedItem Selected reference planned event item\n       */\n      handleRefPlannedEventSelect: function (selectedItem) {\n        var selectedEvent = selectedItem.getBindingContext(\"props\").getObject();\n\n        // Bind selected reference planned event's info to form model\n        this.setFieldsValue({\n          refPlannedEventType: selectedEvent.eventTypeFullName,\n          refPlannedEventMatchKey: selectedEvent.eventMatchKey,\n          refPlannedEventLocationAltKey: selectedEvent.locationAltKey,\n        });\n      },\n\n      /**\n       * Handle actual business time change\n       *\n       * @param {boolean} valid Is actual business time valid or not\n       */\n      handleActualBusinessTimeChange: function (valid) {\n        this.setIsActualBusinessTimeValid(valid);\n      },\n\n      /**\n       * Handle actual business time zone change\n       *\n       * @param {string} value Time zone code\n       * @param {boolean} itemPressed Is time zone selected\n       */\n      handleActualBusinessTimeZoneChange: function (value, itemPressed) {\n        this.setIsActualBusinessTimeZoneValid(\n          itemPressed ||\n          !value ||\n          !!this.state.timeZoneOffsetMap[value]\n        );\n      },\n\n      /**\n       * Handle Reported By change\n       *\n       * @param {string} value  Value of Reported By\n       */\n      handleReportedByChange: function (value) {\n        this.setIsReportedByValid(value !== \"\");\n      },\n\n      /**\n       * Update user defined fields\n       *\n       * @param {string} eventType Event type\n       */\n      updateUserDefinedFields: function (eventType) {\n        this.setIsUserDefinedFieldsLoading(true);\n\n        modelApi.getFieldsByEventType(\"Shipment\", eventType).then(function (response) {\n          this.removeAllUserDefinedFields();\n\n          response.elements.filter(function (fieldInfo) {\n            return !fieldInfo.isFromCoreModel;\n          }).forEach(function (fieldInfo) {\n            var bindingPath = FORM_MODEL_NAME + \">/\" + fieldInfo.name;\n            if (fieldInfo.type === CustomField.Type.CodeList) {\n              bindingPath += CODE_LIST_FIELD_SUFFIX;\n            }\n\n            var field = this.generateUserDefinedField({\n              id: this.createId(fieldInfo.name),\n              fieldInfo: fieldInfo,\n              bindingPath: bindingPath,\n            });\n\n            if (field) {\n              this.insertUserDefinedField({\n                label: this.getLocalizedLabel(fieldInfo),\n                field: field,\n              });\n              // Save its bindingPath\n              this.state.userDefinedFieldBindingPaths.push(bindingPath);\n            }\n          }, this);\n\n          this.setIsUserDefinedFieldsLoading(false);\n\n          switch (response.parent.target) {\n            case \"CoreModel.GTTOnTimeEvent\":\n            case \"CoreModel.GTTDelayedEvent\":\n              this.setHasRefFields(true);\n              break;\n\n            case \"CoreModel.Event\":\n              this.setHasRefFields(false);\n\n              // Clear up Referenced Planned Event\n              this.setFieldsValue({\n                refPlannedEventType: undefined,\n                refPlannedEventMatchKey: undefined,\n                refPlannedEventLocationAltKey: undefined,\n              });\n\n              this.byId(\"refPlannedEvent\").setSelectedKey();\n              break;\n          }\n        }.bind(this), function (error) {\n          this.handleHttpError(error);\n          this.setIsUserDefinedFieldsLoading(false);\n        }.bind(this));\n      },\n\n      /**\n       * Generate user defined field\n       *\n       * @param {object} options Generation options\n       * @param {EventTypeFieldInfo} options.fieldInfo Field's info\n       * @param {string} options.bindingPath Binding path\n       * @param {string} [options.id=\"\"] Field's ID\n       * @param {boolean} [options.shouldRenderCompositionTable=true] Should render composition table or not\n       *\n       * @returns {sap.ui.core.Control|undefined} The generated field\n       */\n      generateUserDefinedField: function (options) {\n        var defaultOptions = {\n          id: \"\",\n          shouldRenderCompositionTable: true,\n        };\n        var opts = Object.assign({}, defaultOptions, options);\n\n        var fieldInfo = opts.fieldInfo;\n        var bindingPath = opts.bindingPath;\n        var id = opts.id;\n        var shouldRenderCompositionTable = opts.shouldRenderCompositionTable;\n\n        /** @type {sap.ui.core.Control} */\n        var field;\n        /** @type {sap.ui.model.SimpleType} */\n        var valueType;\n\n        // Generate field control\n        switch (fieldInfo.type) {\n          case CustomField.Type.Integer:\n            field = new Input(id, {\n              type: sap.m.InputType.Number,\n            });\n            valueType = new sap.ui.model.type.Integer({\n              emptyString: null,\n            });\n            break;\n\n          case CustomField.Type.Decimal:\n            field = new Input(id, {\n              type: sap.m.InputType.Number,\n            });\n            valueType = new sap.ui.model.type.Float({\n              minFractionDigits: fieldInfo.precision - fieldInfo.scale,\n              maxFractionDigits: fieldInfo.precision + fieldInfo.scale,\n              emptyString: null,\n            });\n            break;\n\n          case CustomField.Type.Boolean:\n            field = new Select(id, {\n              forceSelection: false,\n            });\n            [\n              { key: null, i18nKey: \"noneSelected\" },\n              { key: true, i18nKey: \"yes\" },\n              { key: false, i18nKey: \"no\" },\n            ].forEach(function (selection) {\n              field.addItem(new Item({\n                key: selection.key,\n                text: i18n(selection.i18nKey),\n              }));\n            }.bind(this));\n            break;\n\n          case CustomField.Type.CodeList:\n            field = new Select(id, {\n              forceSelection: false,\n              enabled: false,\n              busy: true,\n            });\n            field.addItem(new Item({\n              key: null,\n              text: i18n(\"noneSelected\"),\n            }));\n\n            // Fetch the code list\n            eventApi.getCodeListByName(\n              fieldInfo.target.split(\".\").pop()\n            ).then(function (response) {\n              // Insert each code list item as selection\n              response.forEach(function (value) {\n                field.addItem(new Item({\n                  key: value.code,\n                  text: value.localized.name ? value.localized.name : value.name,\n                }));\n              });\n              field.setEnabled(true);\n              field.setBusy(false);\n            }, function (error) {\n              this.handleHttpError(error);\n              field.setBusy(false);\n            }.bind(this));\n            break;\n\n          case CustomField.Type.Date:\n            field = new DatePicker(id, {\n              valueFormat: DATE_PATTERN,\n              valueStateText: i18n(\"wrongFormatWarningMsg\"),\n              change: function (event) {\n                var source = event.getSource();\n                var valid = event.getParameters().valid;\n                source.setValueState(valid ? ValueState.None : ValueState.Error);\n              },\n            });\n            break;\n\n          case CustomField.Type.Timestamp:\n            field = new DateTimePicker(id, {\n              valueFormat: DATE_TIME_PATTERN,\n              valueStateText: i18n(\"wrongFormatWarningMsg\"),\n              change: function (event) {\n                var source = event.getSource();\n                var valid = event.getParameters().valid;\n                source.setValueState(valid ? ValueState.None : ValueState.Error);\n              },\n            });\n            break;\n\n          case CustomField.Type.Association:\n            // Skip\n            return undefined;\n\n          case CustomField.Type.Composition:\n            // Need core-engine support\n            // if (shouldRenderCompositionTable) {\n            //   this.insertCompositionTable(fieldInfo, bindingPath);\n            // }\n            return undefined;\n\n          case CustomField.Type.String:\n            field = new Input(id, {\n              maxLength: fieldInfo.length,\n            });\n            break;\n\n          case CustomField.Type.UUID:\n          default:\n            field = new Input(id);\n            break;\n        }\n\n        // Bind field value to the form model\n        switch (field.getMetadata().getName()) {\n          case \"sap.m.Input\":\n          case \"sap.m.DatePicker\":\n          case \"sap.m.DateTimePicker\":\n            field.bindValue({\n              path: bindingPath,\n              type: valueType,\n            });\n            break;\n          case \"sap.m.Select\":\n            field.bindProperty(\"selectedKey\", bindingPath);\n            break;\n          default:\n            return undefined;\n        }\n\n        return field;\n      },\n\n      /**\n       * Insert user defined field into the form\n       *\n       * @param {object} options Field options\n       * @param {string} options.label Field label\n       * @param {sap.ui.core.Control} options.field Field control\n       */\n      insertUserDefinedField: function (options) {\n        /** @type {sap.ui.layout.form.FormElement} */\n        var formElement = new FormElement();\n        formElement.setLabel(options.label);\n        formElement.addField(options.field);\n\n        this.getUserDefinedFieldsFormContainer().addFormElement(formElement);\n      },\n\n      insertCompositionTable: function (fieldInfo, bindingPath) {\n        var compositionTable = new sap.ui.table.Table(\"\", {\n          enableColumnReordering: false,\n          visibleRowCountMode: \"Interactive\",\n          visibleRowCount: 3,\n          minAutoRowCount: 1,\n          alternateRowColors: true,\n          selectionMode: \"None\",\n          rowActionCount: 1,\n          rowActionTemplate: new sap.ui.table.RowAction(\"\", {\n            items: new sap.ui.table.RowActionItem(\"\", {\n              icon: \"sap-icon://decline\",\n              press: function (event) {\n                var rowIndex = event.getParameters().row.getIndex();\n                var compositionItems = this.getFieldValue(fieldInfo.name);\n\n                compositionItems.splice(rowIndex, 1);\n                this.setFieldValue(fieldInfo.name, compositionItems);\n              }.bind(this),\n            }),\n          }),\n        }).bindRows(bindingPath);\n\n        var compositionPanel = new sap.m.Panel(\"\", {\n          headerToolbar: new sap.m.OverflowToolbar(\"\", {\n            content: [\n              new sap.m.Text({\n                text: this.getLocalizedLabel(fieldInfo),\n              }).addStyleClass(\"sapMPanelHdr\"),\n              new sap.m.ToolbarSpacer(),\n              new sap.m.Button({\n                text: i18n(\"add\"),\n                press: function () {\n                  this.setFieldValue(\n                    fieldInfo.name,\n                    this.getFieldValue(fieldInfo.name).concat([{}])\n                  );\n                }.bind(this),\n              }),\n            ],\n            active: true,\n            press: function () {\n              compositionPanel.setExpanded(!compositionPanel.getExpanded());\n            },\n          }),\n          content: compositionTable,\n          expandable: true,\n          busy: true,\n        });\n\n        modelApi.getFieldsByEventType(\n          \"Shipment\",\n          fieldInfo.target.split(\".\").pop()\n        ).then(function (response) {\n          response.elements.forEach(function (childFieldInfo) {\n            compositionTable.addColumn(new sap.ui.table.Column(\"\", {\n              label: new sap.m.Label({\n                text: this.getLocalizedLabel(childFieldInfo),\n              }),\n              template: this.generateUserDefinedField({\n                fieldInfo: childFieldInfo,\n                bindingPath: FORM_MODEL_NAME + \">\" + childFieldInfo.name,\n                shouldRenderCompositionTable: false, // Nested composition is currently not supported\n              }),\n              minWidth: 240,\n            }));\n          }, this);\n          compositionPanel.setBusy(false);\n        }.bind(this), function (error) {\n          this.handleHttpError(error);\n          compositionPanel.setBusy(false);\n        }.bind(this));\n\n        this.getCompositionTableVBox().addItem(compositionPanel);\n        this.setFieldValue(fieldInfo.name, [{}]);\n      },\n\n      /**\n       * Remove all user defined fields from form\n       */\n      removeAllUserDefinedFields: function () {\n        // Clear user defined fields' data\n        this.state.userDefinedFieldBindingPaths.forEach(function (bindingPath) {\n          this.setFieldValue(bindingPath.split(\">/\").pop(), undefined);\n        }, this);\n\n        // Reset binding paths\n        this.setUserDefinedFieldBindingPaths([]);\n\n        this.getUserDefinedFieldsFormContainer().destroyFormElements();\n        this.getCompositionTableVBox().destroyItems();\n      },\n\n      /**\n       * Update the delivery items table\n       *\n       * @param {object[]} deliveryItems Delivery items\n       */\n      updateDeliveryItemsTable: function (deliveryItems) {\n        this.setDeliveryItems(deliveryItems.map(function (deliveryItem) {\n          return Object.assign({}, deliveryItem, {\n            quantity: deliveryItem.orderQuantity,\n          });\n        }));\n      },\n\n      /**\n       * Get field value by name\n       *\n       * @param {string} name Field name (Add `\"_code\"` suffix if is a `CodeList` field)\n       * @returns {any} Field value\n       */\n      getFieldValue: function (name) {\n        return deepClone(\n          this._formModel.getProperty(\"/\" + name)\n        );\n      },\n\n      /**\n       * Set field value\n       *\n       * @param {string} name Field name (Add `\"_code\"` suffix if is a `CodeList` field)\n       * @param {any} value Field value\n       */\n      setFieldValue: function (name, value) {\n        this._formModel.setProperty(\"/\" + name, value);\n      },\n\n      /**\n       * Set values for multiple fields\n       *\n       * @param {object} values Values\n       */\n      setFieldsValue: function (values) {\n        this._formModel.setData(values, /* bMerge= */ true);\n      },\n\n      /**\n       * Get user defined fields form container\n       *\n       * @returns {sap.ui.layout.form.FormContainer} User defined fields form container\n       */\n      getUserDefinedFieldsFormContainer: function () {\n        return this.byId(\"userDefinedFieldsFormContainer\");\n      },\n\n      /**\n       * Get composition table VBox\n       *\n       * @returns {sap.m.VBox} Composition table VBox\n       */\n      getCompositionTableVBox: function () {\n        return this.byId(\"compositionTableVBox\");\n      },\n\n      reportEvent: function () {\n        // Read form data\n        var formData = this._formModel.getData();\n\n        // Validate form data, quit if is invalid\n        if (!this.state.eventType) {\n          this.setIsPlannedEventValid(false);\n          this.setIsUnplannedEventValid(false);\n          return;\n        }\n        if (\n          !formData.actualBusinessTimestamp ||\n          !this.state.isActualBusinessTimeValid\n        ) {\n          this.setIsActualBusinessTimeValid(false);\n          return;\n        }\n        if (!this.state.isActualBusinessTimeZoneValid) {\n          return;\n        }\n        if (\n          !formData.reportedBy ||\n          !this.state.isReportedByValid\n        ) {\n          this.setIsReportedByValid(false);\n          return;\n        }\n\n        // Build up event payload\n        var eventPayload = Object.assign({}, formData, {\n          altKey: this.props.altKey,\n          actualBusinessTimestamp: formData.actualBusinessTimestamp.replace(/((\\+|-)\\d{2}:\\d{2}|Z)$/g, \"\") + (\n            formData.actualBusinessTimeZone ? this.state.timeZoneOffsetMap[formData.actualBusinessTimeZone] : \"Z\"\n          ),\n        });\n\n        // Clean up event payload (Delete `\"\"` and `null`)\n        Object.keys(eventPayload).forEach(function (key) {\n          if (eventPayload[key] === \"\" || eventPayload[key] === null) {\n            delete eventPayload[key];\n          }\n\n          // Remove empty composition items\n          // if (Array.isArray(eventPayload[key])) {\n          //   eventPayload[key] = eventPayload[key].filter(function (item) {\n          //     return !isEmptyObject(item);\n          //   });\n          //   if (!eventPayload[key].length) {\n          //     delete eventPayload[key];\n          //   }\n          // }\n        });\n\n        // Report new event & delivery items\n        this.setIsEventReporting(true);\n\n        var payloads = [eventPayload].concat(\n          // Build up payload for each delivery item extends from `eventPayload`\n          this.state.deliveryItems.filter(function (deliveryItem) {\n            return deliveryItem.quantity > 0;\n          }).map(function (deliveryItem) {\n            return Object.assign({}, eventPayload, {\n              altKey: deliveryItem.altKey,\n              eventMatchKey: deliveryItem.eventMatchKey,\n              quantity: deliveryItem.quantity,\n              priority: eventPayload.priority ? (eventPayload.priority + 1) : 1,\n            });\n          })\n        );\n\n        Promise.allSettled(\n          payloads.map(function (payload) {\n            return eventApi.report(this.state.eventType, payload);\n          }, this)\n        ).then(function (\n          /** @type {PromiseSettledResult<any>[]} */\n          results\n        ) {\n          var failedIndex = results.findIndex(function (result) {\n            return result.status === \"rejected\";\n          });\n\n          if (failedIndex === -1) {\n            this.close();\n          } else {\n            this.handleHttpError(results[failedIndex].reason, payloads[failedIndex]);\n            this.setIsEventReporting(false);\n          }\n        }.bind(this));\n      },\n\n      /**\n       * Handle HTTP error\n       *\n       * @param {object} error HTTP error\n       * @param {*} details Error details\n       */\n      handleHttpError: function (error, details) {\n        var response = error.response;\n        MessageBox.error(response.data, {\n          title: response.status + \" \" + response.statusText,\n          details: details,\n        });\n      },\n\n      /**\n       * Get localized label of given field info\n       *\n       * @param {object} fieldInfo Field info\n       * @returns {string} The localized label of given field info\n       */\n      getLocalizedLabel: function (fieldInfo) {\n        return i18n(fieldInfo.i18nKey) || fieldInfo.name;\n      },\n\n      // ======================================================================\n      // External Dependencies\n      // ======================================================================\n\n      formatter: formatter,\n    });\n  }\n);\n"},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/controller/Shipment.controller.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/controller/ShipmentList.controller.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/controller/TrackingTimeline.controller.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/controls/CurrentLocation.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/localService/mockserver.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/model/formatter.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/model/type/ISODate.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/model/type/ISODateTime.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/flpSandbox.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/initFlpSandboxMockServer.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/integration/AllJourneys.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/integration/NavigationJourney.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/integration/NotFoundJourney.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/integration/ShipmentJourney.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/integration/ShipmentListJourney.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/integration/opaTests.qunit.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/integration/pages/NotFoundPage.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/integration/pages/ShipmentListPage.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/integration/pages/ShipmentPage.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/testsuite.qunit.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/unit/Component.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/unit/constant/Event.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/unit/constant/ProcessStatus.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/unit/controller/BaseController.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/unit/controller/ErrorHandler.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/unit/controller/Shipment.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/unit/controller/ShipmentList.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/unit/controller/TrackingTimeline.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/unit/controller/test.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/unit/model/formatter.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/unit/unitTests.qunit.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/unit/util/AnnotationUtil.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/unit/util/AsyncUtils.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/unit/util/RestClient.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/unit/util/ServiceUtils.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/test/unit/util/test.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/util/AnnotationUtil.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/util/Api.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/util/AsyncUtils.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/util/RestClient.js","messages":[{"ruleId":"no-param-reassign","severity":1,"message":"Assignment to function parameter 'config'.","line":149,"column":7,"nodeType":"Identifier","endLine":149,"endColumn":13},{"ruleId":"no-param-reassign","severity":1,"message":"Assignment to function parameter 'url'.","line":189,"column":11,"nodeType":"Identifier","endLine":189,"endColumn":14}],"errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"sap.ui.define(\n  [\n    \"sap/ui/thirdparty/jquery\",\n    \"sap/base/Log\",\n    \"sap/base/security/encodeURLParameters\",\n    \"./AsyncUtils\",\n  ],\n  function (jQuery, Log, encodeURLParameters, AsyncUtils) {\n    \"use strict\";\n\n    var RestClient = {};\n\n    var XSRF_HEADER_NAME = \"X-CSRF-Token\";\n\n    var RequestType = {\n      XHR: \"xhr\",\n      Fetch: \"fetch\",\n    };\n\n    var _requestType = RequestType.XHR;\n    var _csrfToken;\n\n    function _handleRequestHeaders(request) {\n      if (!request.headers) {\n        request.headers = {};\n      }\n\n      Object.assign(request.headers, {\n        \"Accept-Language\": sap.ui.getCore().getConfiguration().getLanguage(),\n      });\n    }\n\n    function _handleResponseHeaders(responseHeadersString) {\n      var rHeaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/gm;\n      var responseHeaders = {};\n      var match;\n\n      while ((match = rHeaders.exec(responseHeadersString))) {\n        var key = match[1].toLowerCase();\n        responseHeaders[key] = match[2];\n      }\n\n      return responseHeaders;\n    }\n\n    RestClient.setRequestType = function (type) {\n      _requestType = type;\n    };\n\n    RestClient.getRequestType = function () {\n      return _requestType;\n    };\n\n    RestClient.getCSRFToken = function () {\n      if (_csrfToken) {\n        return Promise.resolve(_csrfToken);\n      }\n\n      return this.fetchCSRFToken().then(function (newToken) {\n        _csrfToken = newToken;\n\n        return _csrfToken;\n      });\n    };\n\n    RestClient.fetchCSRFToken = function () {\n      var xsrfHeaderName = XSRF_HEADER_NAME;\n\n      var options = {\n        headers: {},\n      };\n\n      options.headers[xsrfHeaderName] = \"fetch\";\n\n      return this.head(\"/token.json\", options).then(function (res) {\n        var token = res.headers[xsrfHeaderName.toLowerCase()];\n\n        if (!token) {\n          throw new Error(\"Failed to fetch CSRF token\");\n        }\n\n        return token;\n      });\n    };\n\n    RestClient.get = function (url, options) {\n      var config = Object.assign({}, options, {\n        method: \"GET\",\n      });\n\n      return this.request(url, config).then(function (res) {\n        return res.data;\n      });\n    };\n\n    RestClient.post = function (url, data, options) {\n      var config = Object.assign({}, options, {\n        method: \"POST\",\n        data: data,\n        xsrfHeaderName: XSRF_HEADER_NAME,\n      });\n\n      return this.request(url, config).then(function (res) {\n        return res.data;\n      });\n    };\n\n    RestClient.put = function (url, data, options) {\n      var config = Object.assign({}, options, {\n        method: \"PUT\",\n        data: data,\n        xsrfHeaderName: XSRF_HEADER_NAME,\n      });\n\n      return this.request(url, config).then(function (res) {\n        return res.data;\n      });\n    };\n\n    RestClient.delete = function (url, options) {\n      var config = Object.assign({}, options, {\n        method: \"DELETE\",\n        xsrfHeaderName: XSRF_HEADER_NAME,\n      });\n\n      return this.request(url, config).then(function (res) {\n        return res.data;\n      });\n    };\n\n    RestClient.head = function (url, options) {\n      var config = Object.assign({}, options, {\n        method: \"HEAD\",\n      });\n\n      return this.request(url, config);\n    };\n\n    RestClient.request = function (url, config) {\n      var requestType = this.getRequestType();\n      var requestFunc;\n\n      if (requestType === RequestType.Fetch) {\n        requestFunc = this._fetch.bind(this);\n      } else {\n        requestFunc = this._jqXhr.bind(this);\n      }\n\n      config = config || {};\n      _handleRequestHeaders(config);\n\n      return requestFunc(url, config);\n    };\n\n    /* =========================================================== */\n    /* internal methods for jQuery XHR                             */\n    /* =========================================================== */\n\n    function _parseJqXhrResponse(jqXHR) {\n      return {\n        data: jqXHR.responseJSON || jqXHR.responseText,\n        status: jqXHR.status,\n        statusText: jqXHR.statusText,\n        headers: _handleResponseHeaders(jqXHR.getAllResponseHeaders()),\n      };\n    }\n\n    RestClient._jqXhr = function (url, config) {\n      var settings = {};\n\n      var csrfTokenPromise = config.xsrfHeaderName ? this.getCSRFToken() : Promise.resolve();\n\n      return csrfTokenPromise.then(function (csrfToken) {\n        if (config.method) {\n          settings.method = config.method;\n        }\n\n        settings.headers = {};\n\n        if (config.headers) {\n          Object.assign(settings.headers, config.headers);\n        }\n\n        if (config.xsrfHeaderName) {\n          settings.headers[config.xsrfHeaderName] = csrfToken;\n        }\n\n        if (config.params) {\n          url += \"?\" + encodeURLParameters(config.params);\n        }\n\n        if (config.data) {\n          settings.contentType = \"application/json\";\n          settings.data = JSON.stringify(config.data);\n        }\n\n        var jqPromise = jQuery.ajax(url, settings).then(\n          function (data, textStatus, jqXHR) {\n            var response = _parseJqXhrResponse(jqXHR);\n            response.data = data;\n\n            return response;\n          },\n          function (jqXHR, textStatus, errorThrown) {\n            // 404, 500\n            return {\n              response: _parseJqXhrResponse(jqXHR),\n            };\n          }\n        );\n\n        return AsyncUtils.toPromise(jqPromise);\n      });\n    };\n\n    /* =========================================================== */\n    /* internal methods for fetch                                  */\n    /* =========================================================== */\n\n    RestClient._fetch = function (url, config) {\n      Log.warning(\"unimplemented\");\n    };\n\n    return RestClient;\n  }\n);\n"},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/util/ServiceUtils.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/util/ServiceUtilsOld.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/util/dateDiff.js","messages":[{"ruleId":"valid-jsdoc","severity":1,"message":"JSDoc syntax error.","line":8,"column":3,"nodeType":"Block","messageId":"syntaxError","endLine":21,"endColumn":6},{"ruleId":"no-warning-comments","severity":1,"message":"Unexpected 'todo' comment.","line":38,"column":5,"nodeType":"Line","endLine":38,"endColumn":34}],"errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"sap.ui.define([\n  \"sap/base/assert\",\n], function (\n  assert\n) {\n  \"use strict\";\n\n  /**\n   * Calculate the difference between two dates\n   *\n   * @param {Date} date1 Date1\n   * @param {Date} date2 Date2\n   * @returns {{\n   *   weeks: number;\n   *   days: number;\n   *   hours: number;\n   *   minutes: number;\n   *   seconds: number;\n   *   milliseconds: number;\n   * }|undefined} Date difference\n   */\n  var dateDiff = function (date1, date2) {\n    assert(date1 instanceof Date, \"'\" + date1 + \"' is not a valid date.\");\n    assert(date2 instanceof Date, \"'\" + date2 + \"' is not a valid date.\");\n\n    var milliseconds = Math.abs(date2 - date1);\n\n    if (isNaN(milliseconds)) {\n      return undefined;\n    }\n\n    var seconds = Math.floor(milliseconds / 1000);\n    var minutes = Math.floor(seconds / 60);\n    var hours = Math.floor(minutes / 60);\n    var days = Math.floor(hours / 24);\n    var weeks = Math.floor(days / 7);\n\n    // TODO: Add months and years\n\n    return {\n      weeks: weeks,\n      days: days,\n      hours: hours,\n      minutes: minutes,\n      seconds: seconds,\n      milliseconds: milliseconds,\n    };\n  };\n\n  return dateDiff;\n});\n"},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/util/delegateMethods.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/util/i18n.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/I072857/Documents/git/lbn/iot-rapid-connect/GTT-V2-TrackShipmentExtended-UI/ui/webapp/util/registerState.js","messages":[{"ruleId":"valid-jsdoc","severity":1,"message":"JSDoc syntax error.","line":124,"column":11,"nodeType":"Block","messageId":"syntaxError","endLine":129,"endColumn":14},{"ruleId":"valid-jsdoc","severity":1,"message":"JSDoc syntax error.","line":157,"column":9,"nodeType":"Block","messageId":"syntaxError","endLine":162,"endColumn":12}],"errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"sap.ui.define([\"sap/base/util/deepEqual\"], function (deepEqual) {\n  \"use strict\";\n\n  /**\n   * Enable state management in UI5 object.\n   *\n   * For each provided state, a setter method will be created, likes:\n   * `{ loading: false }` -> `setLoading(value)`.\n   *\n   * If a generated setter is called with a value, it will do a simple check on its type,\n   * run the validator and finally check whether it is equal to the previous one.\n   * If a valid new value is provided, the state will be updated and\n   * the corresponding side-effect will be executed if it exist.\n   *\n   * The hook's name of side-effect is generated from state's name, for example:\n   * `loading` -> `onLoadingChange(changes)`, where `changes` is an object containing\n   * the previous value and the current value, e.g., `{ previous: false, current: true }`.\n   *\n   * `observe(targets, effect)` is a method that allows you to observe state changes from\n   * the outside, you can use it to observe multiple states from another object easily.\n   *\n   * In addition, you can customize the validators by using the _Validator Hooks_,\n   * the naming rule will be: `{ count: 0 }` -> `validateCount(nextValue, callback)`.\n   * If you call the `callback` with an error message, it will throw an `Error`.\n   *\n   * This function will also create a method to reset all states to their initial values,\n   * which named `resetState()`.\n   *\n   * @param {Record<string, unknown>} state State with initial values\n   * @param {*} thisArg Context\n   *\n   * @example\n   * state: {\n   *   loading: false,\n   *   count: 0,\n   * },\n   * onInit: function () {\n   *   registerState(this.state, this);\n   *   this.setLoading(true);\n   * },\n   * onLoadingChange: function (changes) {\n   *   console.log(changes);  // { previous: false, current: true }\n   * },\n   * validateCount: function (nextValue, callback) {\n   *   if (nextValue < 0) {\n   *     return callback(\"'count' cannot be negative, please check\");\n   *   }\n   *   return callback();  // Default behavior\n   * },\n   * reset: function () {\n   *   this.resetState();  // { loading: false, count: 0 }\n   *   // ...\n   * },\n   */\n  var registerState = function (state, thisArg) {\n    if (!thisArg.state) {\n      thisArg.state = state;\n    }\n\n    Object.defineProperties(thisArg, {\n      \"initialState\": {\n        value: Object.assign({}, state),\n        enumerable: true,\n      },\n      \"resetState\": {\n        /**\n         * Reset all states to their initial values\n         */\n        value: function () {\n          Object.assign(thisArg.state, thisArg.initialState);\n        },\n        enumerable: true,\n      },\n    });\n\n    /** @type {Record<string, Function[]>} */\n    var effectRegistry = {};\n\n    Object.keys(state).forEach(function (stateName) {\n      var capitalizedStateName = stateName.replace(/^\\S/, function (initial) {\n        return initial.toUpperCase();\n      });\n      var setterName = \"set\" + capitalizedStateName;\n      var validatorName = \"validate\" + capitalizedStateName;\n      var sideEffectName = \"on\" + capitalizedStateName + \"Change\";\n\n      Object.defineProperty(thisArg, setterName, {\n        /**\n         * Setter for certain state\n         *\n         * @param {*} value New value\n         */\n        value: function (value) {\n          if (typeof value !== typeof state[stateName]) {\n            throw new TypeError(\"Type '\" + typeof value + \"' is not assignable to type '\" + typeof state[stateName] + \"'\");\n          }\n\n          thisArg[validatorName](value, function (err) {\n            if (err !== undefined) {\n              throw new Error(err);\n            }\n          });\n\n          var current = thisArg.state[stateName];\n          if (!deepEqual(value, current)) {\n            var previous = current;\n            thisArg.state[stateName] = value;\n\n            thisArg[sideEffectName]({\n              previous: previous,\n              current: value,\n            });\n\n            thisArg._effectRegistry[stateName].forEach(function (effect) {\n              effect.call(thisArg);\n            });\n          }\n        },\n        enumerable: true,\n      });\n\n      if (typeof thisArg[validatorName] !== \"function\") {\n        Object.defineProperty(thisArg, validatorName, {\n          /**\n           * Validator Hook\n           *\n           * @param {*} nextValue Next value\n           * @param {(err?: string) => void} callback Callback\n           */\n          value: function (nextValue, callback) {\n            return callback();\n          },\n        });\n      }\n\n      if (typeof thisArg[sideEffectName] !== \"function\") {\n        Object.defineProperty(thisArg, sideEffectName, {\n          /**\n           * Side-effect Hook\n           *\n           * @param {object} changes Changes\n           * @param {*} changes.previous Previous value\n           * @param {*} changes.current Current value\n           */\n          value: function (changes) { },\n        });\n      }\n\n      effectRegistry[stateName] = [];\n    }, thisArg);\n\n    Object.defineProperties(thisArg, {\n      \"_effectRegistry\": {\n        value: effectRegistry,\n      },\n      \"observe\": {\n        /**\n         * Observe state changes\n         *\n         * @param {string[]} targets Observation targets\n         * @param {() => void} effect Side-effect\n         */\n        value: function (targets, effect) {\n          targets.forEach(function (target) {\n            thisArg._effectRegistry[target].push(effect);\n          }, thisArg);\n        },\n        enumerable: true,\n      },\n    });\n  };\n\n  return registerState;\n});\n"}]